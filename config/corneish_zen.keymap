/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "mouse.dtsi"
#include "keymap_optimot.h"

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

//APPLICATIONS SHORCUTS
    //Omniplan
    #define OMNIPLIDENTR LG(LS(N0))
    #define OMNIPLIDENTL LG(LS(N9))
    //1Password
    #define ONEPWDQUICK LS(LA(LG(OP_P)))
    //Raycast
    #define CLIPB_HIST LG(LA(OP_P))

#define OPTIM   0
#define LOWER   1
#define MOUSE   2
#define ARROW   3
#define NUMBERS 4
#define SCREEN  5

#include "combos.dtsi" // This include **has** to be made **after** the layers' define, else it won't compile.


/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰──────────╮  36  37  38 │ │ 39  40  41 ╭───────────╯
             ╰─────────────╯ ╰────────────╯            */


&kscan0 { debounce-press-ms = <17>;
          debounce-release-ms = <17>;
        };

/ {
    macros {
        q_minuscule: q_minuscule {
            label = "ZM_q_minuscul";
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp CAPS>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp OP_Q>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp CAPS>
                ;
        };
        q_maj: q_maj {
            label = "ZM_q_maj";
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp CAPS>
                , <&macro_tap &kp OP_Q>
                , <&macro_tap &kp CAPS>
                ;
        };
    };
};

// Key position groups
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35   
#define KEYS_L_SPECIAL 0
#define THUMBS_L 36 37 38
#define THUMB_L_SPECIAL 37
#define THUMBS_R 39 40 41

/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯            */

/ {
    behaviors {
        hml: homerow_mods_l {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT_L";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            //global-quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <KEYS_R KEYS_L_SPECIAL THUMBS_R THUMB_L_SPECIAL>;
            hold-trigger-on-release;
        };
        hmr: homerow_mods_r {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT_R";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            //global-quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <KEYS_L THUMBS_L>;
            hold-trigger-on-release;
        };
        hsl: homerow_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_SFT_L";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R KEYS_L THUMBS_L>;
            //hold-trigger-on-release;
        };
        hsr: homerow_shift_r {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_SFT_R";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>; //trying to see if quick right hm shift with X works better with 100 instead of 150. Note : since I moved X from inner left thumb key, this change might not be a good idea anymore.
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS_L>;
            hold-trigger-on-release;
        };
        /*hll: homerow_layer_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYER_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>; // trying to see what gives with 0 instead of 150 => not kept.
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
           //global-quick-tap-ms = <100>; // Added this to see if it is better.
            hold-trigger-key-positions = <KEYS_R THUMBS_L THUMBS_R>;
            hold-trigger-on-release;
        };*/
        hll: homerow_layer_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYER_L";
            #binding-cells = <2>;
            tapping-term-ms = <200>; // switched from 300 to 200, getting too much "af" instead of "@" (layer not triggered)
            quick-tap-ms = <150>; //trying to see what gives with 0 instead of 150 => not kept.
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <KEYS_R THUMBS_L THUMBS_R>;
            hold-trigger-on-release;
        };
        cwl: caps_word_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS WORD LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            //quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&caps_word>;
        };
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp OP_X>, <&kp OP_CCED>, <&kp LC(LG(OP_Q))>;
        };
    }; 


/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯            */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
        display-name = "OPTIM";
// ------------------- --------------------------------------------------------------------------------------------------
// |  TAB  |  À  |  J  |    O   |   É   |   B     |                   |  ^      |  V     |  D    |  L   |   J   | BKSPC |
// | LSHFT |  A  |  U  |    I   |   E   |   ,     |                   |  C      |  T     |  S    |  R   |   N   |   M   |
// |MISSCTRL|  À  |  Y  |    X   |   .   |   K     |                   |  '      |  Q     |  G    |  H   |   F   |   Ç   |
//                     | LOWER/ | TAB / | CMD/ENTER |                   | NUMBER/ | MOUSE/ | RC+SPC|
//                     | CLPBD H| LSHFT |                             | SPACE   |  W     | 
            bindings = <
&kp TAB   &kp OP_AGRV  &kp OP_J        &kp OP_O             &kp OP_EACU        &kp OP_B                 &kp OP_F          &kp OP_D         &kp OP_L             &kp OP_QUOT     &kp OP_Q &kp BSPC
&kp LSHFT &hll ARROW A &hml LCTRL OP_I &hml LALT OP_E       &hml LGUI OP_U     &kp OP_COMM              &kp OP_P          &hmr RGUI OP_T   &hmr RALT OP_S       &hmr RCTRL OP_R &kp OP_N &kp OP_CIR
&kp F10   &kp OP_K     &kp OP_Y        &kp OP_EGRV          &kp OP_DOT         &hll SCREEN OP_W         &kp OP_G          &hsr RSHFT OP_C  &kp OP_M             &kp OP_H        &kp OP_V &kp OP_CCED
                                       &lt LOWER CLIPB_HIST &hsl LSHFT TAB     &mt LGUI SPACE           &lt NUMBERS SPACE &lt MOUSE OP_Z   &td0

            //code pour utiler Caps_Word : &cwl MOUSE 0 (pas adapté à Optimot au 04/07/2022; les keycodes Qwerty sont pris en compte, et même si on peut
            // faire en sorte que certains keycodes ne désactivent pas Caps, je ne vois pas pour le moment comment faire pour que des keycodes
            // qwerty de lettres et qui sont par exemple , ou . en optimot puissent désactiver CAPS au lieu de le laisser actif).
            // Update : PeteJohansson m'a recommande d'ouvrir une issue sur le github avec mes propositions. À faire éventuellement quand j'aurai du temps.
            >;
        };

        lower_layer {
        display-name = "LOWER";
// ----------------------------------------------------------------------------------------------------------------
// | ESC   |  F1 |  F2 |  F3  |  F4      |  F5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |   F6  |  F7 |  F8 |  F9  |  F10     |  F11 |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |DoNotDist |  F12 |                   |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |          |      |                   |      |       |       |      |
            bindings = <                       
&kp ESC &kp F1 &kp F2 &kp F3 &kp F4      &kp F5               &kp LA(LC(LS(OP_F)))     &kp LA(LC(LS(OP_D)))     &kp LA(LC(LS(OP_L)))      &kp LA(LC(LS(OP_QUOT))) &none                 &kp F12
&kp F6  &kp F7 &kp F8 &kp F9 &kp F10     &kp F11              &kp LA(LC(LS(OP_P)))     &kp LA(LC(LS(LEFT)))     &kp LA(LC(LS(UP)))        &kp LA(LC(LS(DOWN)))    &kp LA(LC(LS(RIGHT))) &kp LS(LA(LC(LG(OP_G))))
&kp F3  &none  &none  &none  &kp LG(F12) &kp F12              &kp LA(LC(LS(OP_G)))     &kp LC(LG(OP_Q))         &kp LA(LC(LS(OP_M)))      &kp LA(LC(LS(OP_H)))    &none                 &kp LS(LA(LC(LG(OP_D))))
                      &trans &trans      &trans               &kp LG(LA(LC(LS(LEFT)))) &kp LG(LA(LC(LS(DOWN)))) &kp LG(LA(LC(LS(RIGHT)))) 
            >;
        };

        mouse_layer {
        display-name = "MOUSE";
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// |                     |NewOmniFocTaskFromTxt| HOME       | MouseUP      |  END       |Spotlight|             |      |      |       |      |       |       |
// |NewOmniFocTaskFromTxt| INS                 | Mouseleft  | MouseDwn     | MouseRght  | ??   |                | PGUP |      |   ^   |      |       | OutlkNewMainWindow|
// |AppsForceQuit        | FileMailOutlook     |WkfyNormSize|  WkfySmall   | WkfyBigger |Emojis|                |      |      |       |      |       |       |
//                                                          |              |            |      |                |      |      |       |
            bindings = <    
&kp ESC               &kp LA(LC(LG(LS(R)))) &kp LG(LEFT)          &mmv MOVE_UP    &kp LG(RIGHT)     &kp LA(LC(LS(SPACE)))               &kp C_MUTE &kp C_VOL_DN        &kp C_VOL_UP          &kp LG(OP_M)         &none                &trans
&kp HOME              &kp RA(RG(G))         &mmv MOVE_LEFT        &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &kp END                             &kp PG_UP  &mkp LCLK           &mkp RCLK             &kp LG(LS(OP_M))     &none                &kp LA(LG(LS(OP_N)))
&kp LA(LG(ESC))       &kp LC(D)             &kp LG(KP_N0)         &kp  LG(MINUS)  &kp LG(EQUAL)     &kp LC(LG(SPACE))                   &kp PG_DN  &msc SCRL_LEFT      &msc SCRL_UP          &msc SCRL_DOWN        &msc SCRL_RIGHT &none
                                                                  &trans          &trans            &trans                              &trans     &trans              &trans  
            >;
        };

        arrow_layer {
        display-name = "ARROW";
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// | TO 0  | none| LeftDesk | RightDesk    | WkfyMirror  |  BSPC         |                   |  @   |  Rycst-MenuCmd  |  none  |  none   |  q    |  BSPC    |
// | Trans |Trans|          |              |             |  1PassWD  |                   |  #   |  Left           |  UP    |  Down   | Right |  None    |
// | RESET  |     | HookCpyLk  | HookCpyMDLk  | HookToLink |   Hook     |                    |  ??ê?? |  $/€             |WkfyMvUP|WkfyMvDwn|TxTXSearch|TxTXDisable|
//                          |              | LSHFT / Home |  trans       |                   |  SPC | END |WkfyNext|
            bindings = <
&to 0       &none  &kp OMNIPLIDENTL      &kp OMNIPLIDENTR      &kp  LG(LS(COMMA))    &kp BSPC                      &kp OP_AT            &kp LS(LA(LG(N8))) &none     &none     &q_minuscule         &kp BSPC
&trans      &trans &kp LCTRL             &kp LALT              &kp  LGUI             &kp ONEPWDQUICK               &kp OP_HASH          &kp LEFT           &kp UP    &kp DOWN  &kp RIGHT            &q_maj
&bootloader &none  &kp LG(LC(LA(SPACE))) &kp LS(LA(LG(SPACE))) &kp LC(LS(LG(SPACE))) &kp LG(LS(SPACE))             &kp NON_US_BACKSLASH &kp OP_DLR         &kp PG_UP &kp PG_DN &kp RG(LS(LA(OP_F))) &kp RA(RC(RG(OP_T)))
                                         &kp LC(LEFT)          &hsl LSHFT HOME       &trans                        &hmr RSHFT SPACE     &kp HOME           &kp END
            >;
        };

        numbers_layer {
        display-name = "NUMBERS";
// ------------------------------------------------------------------------------------------------------------
// | TAB   |  «° |  °» |  "   |  -   |  +      |                   |  *   |  /    |  =    |  (   |   )   |  BSPC |
// | LSHFT |   1 |   2 |   3  |   4  |   5     |                   |   6  |   7   |   8   |   9  |    0  |   @/_ |
// | F10   | ??ê?? |  ;  |  :   |  .   |   &     |                   |  ,   |   No  |   No  |   H   |   No  |   #/% |
//                     | LCTRL| LALT |CMD/space|                   | togg | RCTRL | RALT  |
            bindings = <            
&kp ESC   &kp N1     &kp N2      &kp N3      &kp N4    &kp N5                   &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp BSPC
&kp LSHFT &kp KP_N1  &kp KP_N2   &kp KP_N3   &kp KP_N4 &kp KP_N5                &kp KP_N6 &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0 &kp MINUS
&kp CAPS  &kp OP_DLR &kp OP_SCLN &kp OP_COLN &trans    &kp LA(OP_T)             &kp G     &none     &none     &trans    &none     &kp EQUAL
                                    &kp RALT &kp LSHFT &mt LGUI SPACE           &trans    &kp RALT  &kp RCTRL
            >;
        };

         screen_layer {
         display-name = "SCREEN";
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR                   &kp LC(LS(O))     &kp C_PREV         &kp C_PP       &kp C_NEXT         &trans         &trans
&none &bt BT_SEL 4 &none        &none        &none        &none                        &kp LC(LS(S))     &kp LG(LC(LS(N4))) &kp LG(LS(N4)) &kp LG(LC(LS(N3))) &kp LG(LS(N3)) &trans
&none &none        &none        &none        &none        &trans                       &kp LG(LS(COMMA)) &kp LG(LS(N9))     &kp RG(RS(UP)) &kp RG(RS(DOWN))   &kp LG(LS(N0)) &trans
                                &bt BT_CLR   &none        &none                        &kp SPACE         &trans             &trans  
            >;
        };
   };
};
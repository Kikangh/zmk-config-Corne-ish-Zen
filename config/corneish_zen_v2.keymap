/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ARROW   3
#define NUMBER  4
#define SCREEN  5

&kscan0 { debounce-period = <17>; };

// Mouse specific config
&mmv {    
        time-to-max-speed-ms = <500>;
        acceleration-exponent=<1>;
};
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
}; 

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret {
            timeout-ms = <50>;
            key-positions = <18 30>;
            bindings = <&kp RET>;
        };
        combo_ret2 {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp RET>;
        };
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp BSPC>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <6 18>;
            bindings = <&kp DEL>;
        };
        combo_shift-tab {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp LS(TAB)>;
        };
        combo_w {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp RBKT>; //BP_W  OPT_CCED
        };
        combo_optcirc {
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp SQT>; //BP_M OPT_CIRC
        };
//        combo_left_x {
//            timeout-ms = <50>;
//            key-positions = <15 27>;
//            bindings = <&kp LBKT>; //BP_M OPT_X
//        };
//        combo_cced {
//            timeout-ms = <50>;
//            key-positions = <21 33>;
//            bindings = <&kp RBKT>; //BP_CCED OPT_CCED
//        };
        combo_z {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp BSLH>; //BP_Z OPT_Z
        };
        combo_arrow {
            timeout-ms = <50>;
            key-positions = <2 3 4>;
            bindings = <&tog ARROW>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp LG(LBKT)>; //OPT_CUT
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp LG(M)>; //OPT_COPY
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp LG(FSLH)>; //OPT_PASTE
        };
        combo_paste_without_format {
            timeout-ms = <50>;
            key-positions = <5 17>;
            bindings = <&kp LG(LA(LS(FSLH)))>; //OPT_PASTE_WITHOUT_FORMAT
        };
        combo_undo {
            timeout-ms = <50>;
            key-positions = <17 29>;
            bindings = <&kp LG(BSLH)>; //OPT_UNDO
        };
        combo_redo {
            timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp LG(LS(BSLH))>; //OPT_REDO
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LG(TAB)>;
        };
        combo_circ{
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp SQT>; //OPT_CIRC
        };
        combo_cmd-tab {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp TAB>;
        };
//        combo_left-space {
//            timeout-ms = <30>;
//            key-positions = <6 7>;
//            bindings = <&kp LC(LEFT)>;
//        };
        combo_left-space2 {
            timeout-ms = <30>;
            key-positions = <3 4>;
            bindings = <&kp LC(LEFT)>;
        };
        combo_right-space {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp LC(RIGHT)>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_esc2 {
            timeout-ms = <50>;
            key-positions = <0 12>;
            bindings = <&kp ESC>;
        };
        combo_esc3 {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp ESC>;
        };
    };
};

// ------------------------------------------------------------------------------------------------------------
// |  0    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   10  |   11  |
// |  12   | 13  |  14 | 15   | 16   |  17  |                   |  18  |  19   |  20   |  21  |   22  |   23  |
// |  24   | 25  |  26 | 27   | 28   |  29  |                   |  30  |  31   |  32   |  33  |   34  |   35  |
//                     | 36   | 37   |  38  |                   |  39  | 40    |  41   |


/ {
    behaviors {
        hm1: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS1";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm2: homerow_mods2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS2";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
        hml: homerow_mods_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFTH";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <260>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };
        hmr: homerow_mods_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHTH";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <260>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };
        ht: homerow_layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        ht2: homerow_layertap2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERTAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <260>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <2 3 4 5 15 16 17 25 26 27 28 29 37 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };
        cwl: caps_word_layer{
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS WORD LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            //quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
        label = "OPTIM";
// ------------------- --------------------------------------------------------------------------------------------------
// |  TAB  |  B  |  É  |    P   |   O   |   È     |                   |  ^      |  V     |  D    |  L   |   J   | BKSPC |
// | LSHFT |  A  |  U  |    I   |   E   |   ,     |                   |  C      |  T     |  S    |  R   |   N   |   M   |
// |MISSCTRL|  À  |  Y  |    X   |   .   |   K     |                   |  '      |  Q     |  G    |  H   |   F   |   Ç   |
//                     | LOWER/ | TAB / | CMD/ENTER |                   | NUMBER/ | RAISE/ | RC+SPC|
//                     | CLPBD H| LSHFT |                             | SPACE   |  W     | 
            bindings = <
&kp TAB        &kp Q        &kp W        &kp E               &kp R           &kp T                          &kp Y            &kp U          &kp I                &kp O        &kp P           &kp BSPC
&kp LSHFT      &ht2 ARROW A &hml LCTRL S &hml LALT D         &hml LGUI F     &kp G                          &kp H            &hmr RGUI J    &hmr RALT K          &hmr RCTRL L &hmr RSHFT SEMI &kp SQT
&kp F10        &kp Z        &kp X        &kp C               &kp V           &ht SCREEN B                   &kp N            &kp M          &kp COMMA            &kp DOT      &kp FSLH        &kp RBKT
                                         &lt LOWER LG(LA(H)) &hml RSHFT LBKT &mt LGUI SPACE                 &lt NUMBER SPACE &lt RAISE CAPS &hm2 RSHFT RC(SPACE)
            >;
            //code pour utiler Caps_Word : &cwl RAISE 0 (pas adapté à Optimot au 04/07/2022; les keycodes Qwerty sont pris en compte, et même si on peut
            // faire en sorte que certains keycodes ne désactivent pas Caps, je ne vois pas pour le moment comment faire pour que des keycodes
            // qwerty de lettres et qui sont par exemple , ou . en optimot désactives CAPS au lieu de le laisser actif).
        };

        lower_layer {
        label = "LOWER";
// ----------------------------------------------------------------------------------------------------------------
// | ESC   |  F1 |  F2 |  F3  |  F4      |  F5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |   F6  |  F7 |  F8 |  F9  |  F10     |  F11 |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |DoNotDist |  F12 |                   |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |          |      |                   |      |       |       |      |
            bindings = <                       
&kp ESC &kp F1 &kp F2 &kp F3 &kp F4      &kp F5               &kp LA(LC(LS(Y)))        &kp LA(LC(LS(U)))        &kp LA(LC(LS(I)))         &kp LA(LC(LS(O)))    &none                        &kp F12
&kp F6  &kp F7 &kp F8 &kp F9 &kp F10     &kp F11              &kp LA(LC(LS(H)))        &kp LA(LC(LS(LEFT)))     &kp LA(LC(LS(UP)))        &kp LA(LC(LS(DOWN))) &hm1 RSHFT LA(LC(LS(RIGHT))) &kp LS(LA(LC(LG(N))))
&kp F3  &none  &none  &none  &kp LG(F12) &kp F12              &kp LA(LC(LS(N)))        &kp LC(LG(P))            &kp LA(LC(LS(COMMA)))     &kp LA(LC(LS(DOT)))  &none                        &kp LS(LA(LC(LG(U))))
                      &trans &trans      &trans               &kp LG(LA(LC(LS(LEFT)))) &kp LG(LA(LC(LS(DOWN)))) &kp LG(LA(LC(LS(RIGHT))))      
            >;
        };

        raise_layer {
        label = "RAISE";
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// |                     |NewOmniFocTaskFromTxt| HOME       | MouseUP      |  END       |Spotlight|             |      |      |       |      |       |       |
// |NewOmniFocTaskFromTxt| INS                 | Mouseleft  | MouseDwn     | MouseRght  |      |                | PGUP |      |   ^   |      |       | OutlkNewMainWindow|
// |AppsForceQuit        | FileMailOutlook     | HookCpyLk  | HookCpyMDLk  | HookToLink |      |                |      |      |       |      |       |       |
//                                                          |              |            | Hook |                |      |      |       |
            bindings = <    
&kp ESC               &kp LA(LC(LG(LS(R)))) &kp HOME              &mmv MOVE_VERT(-4500) &kp END               &kp LA(LC(LS(SPACE)))               &kp C_MUTE &kp C_VOL_DN        &kp C_VOL_UP          &kp LG(COMMA)        &none                &trans
&kp LA(LC(LG(LS(R)))) &kp RA(RG(G))         &mmv MOVE_HOR(-4500)  &mmv MOVE_VERT(4500)  &mmv MOVE_HOR(4500)   &kp LC(LS(SPACE))                   &kp PG_UP  &mkp LCLK           &mkp RCLK             &kp LG(LS(COMMA))    &none                &kp LA(LG(SEMI))
&kp LA(LG(ESC))       &kp LC(D)             &kp LG(LC(LA(SPACE))) &kp LS(LA(LG(SPACE))) &kp LC(LS(LG(SPACE))) &kp LC(LG(SPACE))                   &kp PG_DN  &mwh SCROLL_HOR(15) &mwh SCROLL_VERT(-15) &mwh SCROLL_VERT(15) &mwh SCROLL_HOR(-15) &none
                                                                  &trans                &trans                &kp LG(LS(SPACE))                   &trans     &trans              &trans  
            >;
        };

        arrow_layer {
        label = "ARROW";
// --------------------------------------------------------------------------------------------------------------------------------------------------
// | TO 0  | none| LeftDesk | RightDesk | WkfyMirror  |  BSPC         |                   |  todo   |  todo    |  todo    |  todo     |  todo    |  todo       |
// | Trans |Trans|          |           |             |  HookCpyMDLk  |                   |  #   |  Left  |  UP    |  Down   | Right   |  None      |
// |       |     |    Cut   |  Copy     |   Paste     |PasteWOutFormat|                   |  ??ê?? |  $/€   |WkfyMvUP|WkfyMvDwn|TxTXSearch|TxTXDisable|
//                          |           |   LSHFT     |     trans     |                   |  SPC |WkfyPrev|WkfyNext|
            bindings = <
&to 0  &none     &kp LC(LEFT) &kp LC(RIGHT) &kp LG(LS(COMMA))   &kp BSPC                       &kp MINUS            &kp LG(LS(N8)) &kp LC(LS(TAB))  &kp LC(TAB)      &none             &kp BSPC
&trans &trans    &kp LCTRL    &kp LALT      &kp LGUI            &kp LS(LA(LG(SPACE)))          &kp EQUAL            &kp LEFT       &kp UP           &kp DOWN         &kp RIGHT         &none
&reset &none     &kp LG(LBKT) &kp LG(M)     &kp LG(FSLH)        &kp LS(LA(LG(FSLH)))           &kp NON_US_BACKSLASH &kp GRAVE      &kp RG(RS(UP))   &kp RG(RS(DOWN)) &kp RG(LS(LA(Y))) &kp RA(RC(RG(J)))
                              &kp LG(LA(H)) &hml RSHFT LS(LBKT) &mt LGUI RET                   &hm1 RSHFT SPACE     &kp LG(LS(N9)) &kp LG(LS(N0))
            >;
        };

        number_layer {
        label = "NUMBERS";
// ------------------------------------------------------------------------------------------------------------
// | TAB   |  «° |  °» |  "   |  -   |  +      |                   |  *   |  /    |  =    |  (   |   )   |  BSPC |
// | LSHFT |   1 |   2 |   3  |   4  |   5     |                   |   6  |   7   |   8   |   9  |    0  |   @/_ |
// | F10   | ??ê?? |  ;  |  :   |  .   |   &     |                   |  ,   |   No  |   No  |   H   |   No  |   #/% |
//                     | LCTRL| LALT |CMD/space|                   | togg | RCTRL | RALT  |
            bindings = <            
&trans    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                    &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp BSPC
&kp LSHFT &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_N4 &kp KP_N5                 &kp KP_N6 &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0 &kp MINUS
&kp CAPS  &kp GRAVE &kp LS(G) &kp LS(V) &trans    &kp LA(J)                 &kp G     &none     &none     &trans    &none     &kp EQUAL
                              &kp LCTRL &kp LALT  &mt LGUI SPACE            &trans    &kp RCTRL  &kp RALT
            >;
        };

         screen_layer {
         label = "SCREEN";
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                 &kp LC(LS(O))     &kp C_PREV         &kp C_PP       &kp C_NEXT         &trans         &trans
&none &none        &none        &none        &none        &none                        &kp LC(LS(S))     &kp LG(LC(LS(N4))) &kp LG(LS(N4)) &kp LG(LC(LS(N3))) &kp LG(LS(N3)) &trans
&none &none        &none        &none        &none        &trans                       &kp LG(LS(COMMA)) &kp LG(LS(N9))     &kp RG(RS(UP)) &kp RG(RS(DOWN))   &kp LG(LS(N0)) &trans
                                &bt BT_CLR   &none        &none                        &kp SPACE         &trans             &trans  
            >;
        };
   };
};